generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  account_id      Int           @id @default(autoincrement())
  client_id       Int
  account_number  Int
  account_balance Int
  status_code     Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  Client          Client        @relation(fields: [client_id], references: [client_id], onDelete: Cascade)
  Transaction     Transaction[]
}

model Client {
  client_id   Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  name        String    @db.VarChar(255)
  surname     String    @db.VarChar(255)
  email       String    @db.VarChar(255)
  address     String    @db.VarChar(255)
  telephone   String    @db.VarChar(255)
  login       String    @db.VarChar(255)
  password    String    @db.VarChar(255)
  type        Boolean   @default(false)
  status_code Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Account     Account[]
}

model Transaction {
  transaction_id      Int                   @id @default(autoincrement())
  from_account_id     Int
  to_account_id       Int
  amount              Int
  type                String
  initiated_by        Int
  status_code         Boolean               @default(true)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  Account             Account               @relation(fields: [from_account_id], references: [account_id], onDelete: Cascade)
  Transaction_details Transaction_details[]
}

model Transaction_details {
  id             Int         @id @default(autoincrement())
  transaction_id Int
  account_id     Int
  amount         Int
  type           String
  credit_date    DateTime    @default(now())
  status_code    Boolean     @default(true)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime
  Transaction    Transaction @relation(fields: [transaction_id], references: [transaction_id], onDelete: Cascade)
}
